@model IPagedList<Hoist.Models.BTUser>
@using Hoist.Models.Enums;
@using Hoist.Services.Interfaces;
@using X.PagedList;
@using X.PagedList.Mvc.Core;
@using X.PagedList.Web.Common;

@inject IBTFileService _FileService
@inject IBTRolesService _RolesService


@{
    ViewBag.Title = "Company Members";
    ViewBag.pTitle = "Company Members";
    ViewBag.pageTitle = "Company Members";
    Layout = "_LayoutDashboard";
}

@{
    bool isAdmin = User.IsInRole(nameof(BTRoles.Admin));
    bool isProjectManager = User.IsInRole(nameof(BTRoles.ProjectManager));
}

<div class="row g-4 mb-3">
    @if (isAdmin)
    {

        <div class="col-sm-auto">
            <div>
                <a asp-action="Create" asp-controller="Invites" class="btn btn-success">
                    <i class="ri-add-line align-bottom me-1"></i> Invite to Company
                </a>
            </div>
        </div>
    }
    <div class="col-sm">
        <div class="d-flex justify-content-sm-end gap-2">
            @*<div class="search-box ms-2">
            <input type="text" class="form-control" placeholder="Search...">
            <i class="ri-search-line search-icon"></i>
            </div>*@

            @*<form method="get" asp-action="Index">
            <select class="form-control w-md"  name="sortType" onchange="this.form.submit()" asp-items="ViewBag.SortTypes" data-choices data-choices-search-false>
            <option value="" selected>Sorting by</option>
            </select>

            </form>*@
        </div>
    </div>
</div>



<div class="row">
    @foreach (BTUser user in Model)
    {
        <div class="col-xxl-3 col-sm-6 user-card m-0 g-0 d-flex justify-content-center">

            <div class="card card-animate fade-right" style="width: 14rem;box-shadow: 15px 20px 29px 0px rgba(0,0,0,0.1);">
                <img class="card-img-top" src="@_FileService.ConvertByteArrayToFile(user.ImageFileData, user.ImageFileType, (int)DefaultImage.BTUserImage)" />
                <div class="card-body">
                    <div class=" mt-n3 mx-n3  rounded-top text-end ">
                        <div class="dropdown">
                            <button class="btn btn-link text-muted p-1 mt-n1 py-0 text-decoration-none fs-15"
                                data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                <i data-feather="more-horizontal" class="icon-sm"></i>
                            </button>

                            <div class="dropdown-menu dropdown-menu-end">
                                <a class="dropdown-item" asp-action="details" asp-route-id="@user.Id">
                                    <i class="ri-eye-fill align-bottom me-2 text-muted"></i>
                                    View
                                </a>
                                <a class="dropdown-item" asp-action="edit" asp-route-id="@user.Id">
                                    <i class="ri-pencil-fill align-bottom me-2 text-muted"></i>
                                    Edit
                                </a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="#" data-bs-toggle="modal"
                               data-bs-target="#removeProjectModal" onclick="setProjectId(@user.Id)">
                                    <i class="ri-delete-bin-fill align-bottom me-2 text-muted"></i>
                                    Archive
                                </a>
                            </div>
                        </div>
                        <div class="text-center pb-3">
                            <i class=""></i>
                        </div>
                    </div>
                    <div class="">
                        <h5 class=" fs-15">
                           <span>@user.FullName</span>
                        </h5>
                        @if (await _RolesService.IsUserInRoleAsync(user, nameof(BTRoles.Admin)))
                        {                            
                        <span class=" fs-12 mb-0 text-muted">Admin</span>
                        }
                        @if (await _RolesService.IsUserInRoleAsync(user, nameof(BTRoles.ProjectManager)))
                        {                            
                        <span class=" fs-12 mb-0 text-muted">Project</span>
                        }
                        @if (await _RolesService.IsUserInRoleAsync(user, nameof(BTRoles.Developer)))
                        {                            
                        <span class=" fs-12 mb-0 text-muted">Developer</span>
                        }
                        @if (await _RolesService.IsUserInRoleAsync(user, nameof(BTRoles.Submitter)))
                        {                            
                        <span class=" fs-12 mb-0 text-muted">Submitter</span>
                        }
                    </div>


                </div>
                <!-- end card body -->
            </div>

            <!-- end card -->
        </div>
        <!-- end col -->
    }
    <div class="mt-3">

        <div>
            <p class="mb-sm-0 text-muted">
                Showing <span class="fw-semibold"></span> of <span class="fw-semibold text-decoration-underline"></span> entries
            </p>
        </div>

        @*<div>
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        </div>*@

        <!-- We use the a ViewData to grab the current sort type based on the one sent back from the form above.-->
        @Html.PagedListPager(Model, pageNum => Url.Action("Index", new {pageNum, sortType = ViewBag.CurrentSortType}),
        new PagedListRenderOptions
        {
        UlElementClasses = new string[] { "pagination", "pagination-separated", "justify-content-center", "justify-content-sm-end", "mb-sm-0" },
        LiElementClasses = new string[] {"page-item"},
        PageClasses = new string[] {"page-link"},
        LinkToFirstPageFormat = "<<",
        LinkToPreviousPageFormat = "Prev",
        LinkToNextPageFormat = "Next",
        LinkToLastPageFormat = ">>",
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always
        }
        )
    </div>
</div>
<!-- end row -->
@*<div class="row g-0 text-center text-sm-start align-items-center mb-4">
    <div class="col-sm-6">
        <div>
            <p class="mb-sm-0 text-muted">
                Showing <span class="fw-semibold">@((Model.PageNumber - 1) * Model.PageSize + 1)</span> to <span class="fw-semibold">@Math.Min(Model.PageNumber * Model.PageSize, totalProjects)</span> of <span class="fw-semibold text-decoration-underline">@totalProjects</span> entries
            </p>
        </div>
    </div>
    <!-- end col -->
@*    <div class="col-sm-6">
        <ul class="pagination pagination-separated justify-content-center justify-content-sm-end mb-sm-0">
            <li class="page-item disabled">
                <a href="#" class="page-link">Previous</a>
            </li>
            <li class="page-item active">
                <a href="#" class="page-link">1</a>
            </li>
            <li class="page-item ">
                <a href="#" class="page-link">2</a>
            </li>
            <li class="page-item">
                <a href="#" class="page-link">3</a>
            </li>
            <li class="page-item">
                <a href="#" class="page-link">4</a>
            </li>
            <li class="page-item">
                <a href="#" class="page-link">5</a>
            </li>
            <li class="page-item">
                <a href="#" class="page-link">Next</a>
            </li>
        </ul>
    </div><!-- end col -->
</div>*@
<!-- end row -->
<!-- removeProjectModal -->
<div id="removeProjectModal" class="modal fade zoomIn" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                        id="close-modal"></button>
            </div>
            <div class="modal-body">
                <div class="mt-2 text-center">
                    <lord-icon src="https://cdn.lordicon.com/jtibbqrq.json" trigger="loop"
                               colors="primary:#f7b84b,secondary:#f06548" style="width:100px;height:100px"></lord-icon>
                    <div class="mt-4 pt-2 fs-15 mx-4 mx-sm-5">
                        <h4>Are you Sure ?</h4>
                        <p class="text-muted mx-4 mb-0">Are you Sure You want to archive this Project ?</p>
                    </div>
                </div>
                <div class="d-flex gap-2 justify-content-center mt-4 mb-2">
                    <button type="button" class="btn w-sm btn-light" data-bs-dismiss="modal">Close</button>
                    <button onclick="archiveProject()" type="button" class="btn w-sm btn-danger" id="remove-user">Yes, Archive It!</button>
                </div>
            </div>

        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>

<!-- /.modal -->
@section scripts{
    <!-- user list init -->
    <script src="~/assets/js/pages/user-list.init.js"></script>

    <!-- App js -->
    <script src="~/assets/js/app.js"></script>


    <script>

        let selectedProjectId;
        function setProjectId(userId) {
            selectedProjectId = userId;
        }

        function archiveProject() {
            //String interpolation to create the url needed to handle this particular user
            let url = `/Projects/Archive/${selectedProjectId}`;

            //Sending an AJAX request to the server
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerifactionToken': document.getElementsByName('__RequestVerificationToken')[0].value
                },
            })
                .then(response => {
                    if (response.ok) {
                        //Handling the success by reloading the page
                        location.reload()
                    }
                    else {
                        //Handling the error
                        console.error('Error when archiving user:', response.statusText);
                    }
                })
                .catch(error => {
                    //Handling network errors
                    console.error('Network error: ', error);
                });
        }
    </script>

}



